<?php
namespace GDO\DB;

use GDO\Core\GDT;
use GDO\Table\GDT_Table;
use GDO\UI\WithLabel;

/**
 * A virtual field that is generated by a subquery.
 * Uses a proxy gdt to render.
 * 
 * You need to provide subquery sql and gdt proxy
 * 
 * @author gizmore
 * @version 6.10.1
 * @since 6.10.0
 * 
 * @see GDT_Join
 */
class GDT_Virtual extends GDT
{
    use WithLabel;
    use WithDatabase;
    
    protected function __construct()
    {
        parent::__construct();
        $this->virtual = true;
    }
    
    public function isSerializable() { return true; }
    
    #############
    ### Query ###
    #############
    public $subquery;
    public function subquery($subquery) { $this->subquery = $subquery; return $this; }
    
    #############
    ### Event ###
    #############
    /**
     * Select this virtual column as subselect.
     */
    public function gdoBeforeRead(Query $query)
    {
        if ($this->subquery)
        {
            $query->select("({$this->subquery}) {$this->name}");
        }
    }
    
    public function getGDOData() {} # virtual => no data
    
    #############
    ### Proxy ###
    #############
    /**
     * Encapsulated virtual GDT Proxy
     * @var GDT
     **/
    public $gdtType;
    
    /**
     * Get and setup the proxy GDT
     * @return GDT
     */
    private function proxy()
    {
        return $this->gdtType->gdo($this->gdo)->label($this->label, $this->labelArgs);
    }
    
    public function gdtType(GDT $gdt)
    {
        $this->gdtType = $gdt;
        $this->gdtType->name = $this->name;
        if (isset($gdt->virtual))
        {
            $this->gdtType->virtual = true;
        }
        $this->filterable = $gdt->filterable;
        $this->orderable = $gdt->orderable;
        $this->searchable = $gdt->searchable;
        return $this;
    }
    
    ##############
    ### Render ###
    ##############
    public function htmlClass() { return $this->proxy()->htmlClass(); }

    public function render() { return $this->proxy()->render(); }
    public function renderCell() { return $this->proxy()->renderCell(); }
    public function renderJSON() { return $this->proxy()->renderJSON(); }
    public function renderCard() { return $this->proxy()->renderCard(); }
    public function renderForm() { return $this->proxy()->renderForm(); }
    public function renderHeader() { return $this->proxy()->renderHeader(); }
    public function renderFilter($f) { return $this->proxy()->renderFilter($f); }
    
//  public function displayLabel() { return $this->gdtType->displayLabel(); }
    public function displayTableOrder(GDT_Table $table)
    {
        return $this->proxy()->displayTableOrder($table);
    }
    
    public function filterQuery(Query $query, $rq=null)
    {
        return $this->proxy()->filterQuery($query, $rq);
    }

}
